
AVRASM ver. 2.2.6  C:\asm\AVR\ZAD3\ZAD3\main.asm Thu Jun 01 20:34:03 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328pdef.inc'
C:\asm\AVR\ZAD3\ZAD3\main.asm(8): Including file 'C:\asm\AVR\ZAD3\ZAD3\Def.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(192): Including file 'C:\asm\AVR\ZAD3\ZAD3\hardware.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(193): Including file 'C:\asm\AVR\ZAD3\ZAD3\LCDcontrol.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(194): Including file 'C:\asm\AVR\ZAD3\ZAD3\irq.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(195): Including file 'C:\asm\AVR\ZAD3\ZAD3\Tennis.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m328pdef.inc'
C:\asm\AVR\ZAD3\ZAD3\main.asm(8): Including file 'C:\asm\AVR\ZAD3\ZAD3\Def.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(192): Including file 'C:\asm\AVR\ZAD3\ZAD3\hardware.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(193): Including file 'C:\asm\AVR\ZAD3\ZAD3\LCDcontrol.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(194): Including file 'C:\asm\AVR\ZAD3\ZAD3\irq.asm'
C:\asm\AVR\ZAD3\ZAD3\main.asm(195): Including file 'C:\asm\AVR\ZAD3\ZAD3\Tennis.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; ZAD3.asm
                                 ;
                                 ; Created: 25.05.2017 19:53:26
                                 ; Author : MarcinS
                                 ;
                                 ; include
                                 .include "Def.asm"
                                 
                                 .equ RACKET_SPEED = 8 ; the greater the value, the slower
                                 ; "speed"-  number of ms, between jumping for one pixel
                                 .equ RACKET_SIZE = 16;  inchangeable
                                 .equ DISPLAY_Y_SIZE = 64
                                 .equ DISPLAY_X_SIZE = 128
                                 .equ RACKET_X_SIZE =  2 ; inchangeable
                                 .equ RACKET_FROM_END = 4
                                 .equ BALL_STARTING_SPEED_X = 20 ; range from 1-127
                                 .equ BALL_STARTING_SPEED_Y = 39 ; range from 1-127 the same rules as for every other "speed"
                                 .equ BALL_Y_SPEED_STEP = 4
                                 ;.equ BALL_X_SPEED_STEP = 2 unsed
                                 .equ BALL_SIZE = 2 ;  inchangeable
                                 ; x [ms], for pixel
                                 ; --------LCD  D/#C --------
                                 ; D/#C 
                                 .equ PORT_LCD_DC = PORTB
                                 .equ DDR_LCD_DC  = DDRB
                                 .equ PIN_LCD_DC  = PINB
                                 .equ IN_LCD_DC   = PINB0
                                 
                                 ; ---------LCD  RST ---------
                                 ; Reset
                                 .equ PORT_LCD_RST = PORTB
                                 .equ DDR_LCD_RST  = DDRB
                                 .equ PIN_LCD_RST  = PINB
                                 .equ IN_LCD_RST   = PINB1
                                 
                                 ; -------- RF input --------
                                 ; as player 2 DOWN button
                                 .equ PORT_P2_DOWN = PORTC
                                 .equ DDR_P2_DOWN  = DDRC
                                 .equ PIN_P2_DOWN  = PINC
                                 .equ IN_P2_DOWN   = PINC3
                                 
                                 ; ------- RF SHUT ---------
                                 ; as player 2 UP button
                                 
                                 .equ PORT_P2_UP = PORTC
                                 .equ DDR_P2_UP  = DDRC
                                 .equ PIN_P2_UP  = PINC
                                 .equ IN_P2_UP   = PINC2
                                 
                                 ; ------- UART --------
                                 ; RX as player 1 DOWN button
                                 .equ PORT_P1_DOWN = PORTD
                                 .equ DDR_P1_DOWN  = DDRD
                                 .equ PIN_P1_DOWN  = PIND
                                 .equ IN_P1_DOWN   = PIND0
                                 
                                 ; TX as player 1 UP button
                                 .equ PORT_P1_UP = PORTD
                                 .equ DDR_P1_UP  = DDRD
                                 .equ PIN_P1_UP  = PIND
                                 .equ IN_P1_UP   = PIND1
                                 
                                 ; ------- Iaux -------- 
                                 ; as START button
                                 .equ PORT_START = PORTC
                                 .equ DDR_START  = DDRC
                                 .equ PIN_START  = PINC
                                 .equ IN_START   = PINC0
                                 
                                 ;******************************************************************************
                                 ; Register Definitions
                                 ;******************************************************************************
                                 
                                 .def productL  =     R0         ; reserved, uses by command mul /Product LOW
                                 .def productH  =     R1         ; reserved, uses by command mul /Product HIGH
                                 .def zero      =     R2
                                 .def one       =     R3
                                 .def ff        =     R4
                                 .def timer_2   =     R5         ; system timer MSB
                                 .def timer_1   =     R6         ; system timer
                                 .def timer_0   =     R7         ; system timer LSB
                                 .def rackettimer = R8         
                                 .def ballspeedX= R9         
                                 .def ballspeedY   =     R10        
                                 .def sreg_save =     R11       
                                 .def balltimerX =   R12
                                 .def balltimerY =   R13
                                 ;.def     =     R14  
                                 .def counter = R15
                                 
                                 .def param     =     R16
                                 .def param1    =     R17
                                 .def param2    =     R18
                                 .def param3    =     R19
                                 .def param4    =     R20
                                 .def param5    =     R21
                                 .def param6    =     R22
                                 ;.def param7    =     R23
                                 .def flagsBall    =     R23
                                 	.equ F_TICK_X=		0
                                 	.equ F_TICK_Y=		1
                                 	.equ F_BALL_LEFT =	2
                                 	.equ F_BALL_UP=		3 
                                 
                                 .def tmp =     R24
                                 
                                 .def flags     =     R25
                                  .equ    F_TICK          = 0    ; set every 16 ms
                                  .equ    F_P1_UP         = 1    ; set if pressed
                                  .equ    F_P1_DOWN       = 2
                                  .equ    F_P2_UP         = 3    ; 
                                  .equ    F_P2_DOWN       = 4
                                  .equ    F_START         = 5    ; 
                                  .equ	 F_GAME			 = 6	;
                                  
                                 
                                 
                                 ;.def	XL	= r26		; X pointer low
                                 ;.def	XH	= r27		; X pointer high
                                 ;.def	YL	= r28		; 
                                 ;.def	YH	= r29		; 
                                 ;.def	ZL	= r30		; 
                                 ;.def	ZH	= r31		;
                                 
                                 
                                 ;******************************************************************************
                                 ;; Interrupts table
                                 ;******************************************************************************
                                 .cseg
                                 .org    0x0000              ; RESET External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset, and JTAG AVR Reset
000000 c033                              rjmp   start		; Reset handler 0000
                                 
                                 .org    0x0002              ; INT0 External Interrupt Request 0
000002 c030                              rjmp    _unused_
                                 
                                 .org    0x0004              ; INT1 External Interrupt Request 1
000004 c02e                              rjmp    _unused_
                                 
                                 .org    0x0006
000006 c02c                              rjmp    _unused_	; PCINT0 Pin Change Interrupt Request 0
                                 
                                 .org    0x0008
000008 c02a                              rjmp    _unused_	; PCINT1 Pin Change Interrupt Request 1
                                 
                                 .org    0x000A
00000a c028                              rjmp    _unused_	; PCINT2 Pin Change Interrupt Request 2
                                 
                                 .org    0x000C
00000c c026                              rjmp    _unused_	; WDT Watchdog Time-out Interrupt
                                 
                                 .org    0x000E              ; TIMER2 COMPA Timer/Counter2 Compare Match
00000e c024                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0010              ; TIMER2 COMPA Timer/Counter2 Compare Match
000010 c022                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0012              ; TIMER2 OVF Timer/Counter2 Overflow
000012 c020                              rjmp    _unused_
                                 
                                 .org    0x0014              ; TIMER1 CAPT Timer/Counter1 Capture Event
000014 c01e                              rjmp    _unused_    ;
                                 
                                 .org    0x0016              ; TIMER1 COMPA Timer/Counter1 Compare Match A
000016 c01c                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0018              ; TIMER1 COMPB Timer/Coutner1 Compare Match B
000018 c01a                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x001A              ; TIMER1 OVF Timer/Counter1 Overflow
00001a c018                              rjmp    _unused_
                                 
                                 .org    0x001C              ; TIMER0 COMPA Timer/Counter0 Compare Match A
00001c c111                              rjmp    SystemTimerOvf
                                 
                                 .org    0x001E              ; TIMER0 COMPB Timer/Counter0 Compare Match B
00001e c014                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0020              ; TIMER0 OVF Timer/Counter0 Overflow
000020 c012                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0022              ; SPI, STC SPI Serial Transfer Complete
000022 c010                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0024              ; USART, RX USART Rx Complete
000024 c00e                              rjmp    _unused_
                                 
                                 .org    0x0026              ; USART, UDRE USART, Data Register Empty
000026 c00c                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0028              ; USART, TX USART, Tx Complete
000028 c00a                              rjmp    _unused_
                                 
                                 .org    0x002A               ; ADC ADC Conversion Complete
00002a c008                              rjmp    _unused_     ; unused interrupt
                                 
                                 .org    0x002C              ; EE READY EEPROM Ready
00002c c006                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x002E              ; ANALOG COMP Analog Comparator
00002e c004                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0030              ; TWI 2-wire Serial Interface
000030 c002                              rjmp    _unused_    ; unused interrupt
                                 
                                 .org    0x0032              ; SPM READY Store Program Memory Ready
000032 c000                              rjmp    _unused_    ; unused interrupt
                                 
000033 9518                      
                                 .dseg
000100                           rP1RacketPos: .Byte	1
000101                           rP2RacketPos: .Byte	1
000102                           rBallYPos: .Byte 1
000103                           rBallXPos: .Byte 1
                                 
                                 
                                 
                                 
                                 .cseg
                                 ;BEGIN
                                 start:
                                     ; Init Stack
000034 ef0f                          ldi     param, LOW(RAMEND)  ; LOW-Byte of upper RAM-Adress
000035 bf0d                          out     SPL, param
000036 e008                          ldi     param, HIGH(RAMEND) ; HIGH-Byte of upper RAM-Adress
000037 bf0e                          out     SPH, param
                                 
                                     ; init registers
000038 e000                          ldi     param,0
                                 	
000039 2e20                          mov     zero,param
00003a ef0f                      	ldi     param,$FF
00003b 2e40                          mov     ff,param
00003c e001                          ldi     param,1
00003d 2e30                          mov     one,param
                                 	; init game registers 
                                 	
00003e 2d92                          mov     flags,zero
                                 
                                     ; clear RAM
00003f e0c0                          ldi     YL,LOW(0x100)
000040 e0d1                          ldi     YH,HIGH(0x100)
000041 ef0f                          ldi     param,LOW(0x2ff)
000042 e012                          ldi     param1,HIGH(0x2ff)
                                 ClrRamLoop:
000043 9229                          st      Y+,zero
000044 170c                          cp      param,YL
000045 071d                          cpc     param1,YH
000046 f7e1                          brne    ClrRamLoop
                                 
                                 
000047 940e 0093                     call    InitHardware
000049 940e 00c3                     call    InitLcd
                                 
                                 	
                                 
                                 
00004b 9478                          sei ; enable interupts, setting hardware is done
                                 ;; setting is done
                                 
                                 ;; prepare before first game, and await start
00004c e107                      	ldi		param, (((DISPLAY_Y_SIZE-RACKET_SIZE)/2) -1) ; set racket to center 
00004d 9300 0100                 	sts		rP1RacketPos,param
00004f 9300 0101                 	sts		rP2RacketPos,param
                                 
000051 9110 0101                 	lds		param1, rP2RacketPos
000053 e72a                      	ldi		param2, DISPLAY_X_SIZE-RACKET_FROM_END - RACKET_X_SIZE
000054 d0fd                      	rcall	DisplayRacket
                                 
000055 9110 0100                 	lds		param1, rP1RacketPos
000057 e024                      	ldi		param2, RACKET_FROM_END
000058 d0f9                      	rcall	DisplayRacket
                                 
000059 e11f                      	ldi		param1, (((DISPLAY_Y_SIZE-BALL_SIZE)/2) )
00005a 9310 0102                 	sts		rBallYPos,param1
00005c e32f                      	ldi		param2,(((DISPLAY_X_SIZE-BALL_SIZE)/2) )
00005d 9320 0102                 	sts		rBallYPos,param2
00005f d144                      	rcall	DisplayBall
                                 	
000060 c02e                      	rjmp	INFLOOP
                                 
                                 ;; main program;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 MainProg:
                                 	;; set game registers 
000061 24cc                      	clr		balltimerX
000062 24dd                          clr		balltimerY
000063 2777                      	clr		flagsBall
000064 2488                      	clr		rackettimer
000065 e104                      	ldi		param, BALL_STARTING_SPEED_X
000066 2e90                      	mov		ballspeedX, param
000067 e207                      	ldi		param, BALL_STARTING_SPEED_Y
000068 2ea0                      	mov		ballspeedY, param
                                 
000069 6490                      	sbr		flags, (1<<F_GAME) ;; set game running
                                 
00006a e107                      	ldi		param, (((DISPLAY_Y_SIZE-RACKET_SIZE)/2) -1) ; set racket to center 
00006b 9300 0100                 	sts		rP1RacketPos,param
00006d 9300 0101                 	sts		rP2RacketPos,param
                                 
00006f 9110 0101                 	lds		param1, rP2RacketPos
000071 e72a                      	ldi		param2, DISPLAY_X_SIZE-RACKET_FROM_END - RACKET_X_SIZE
000072 d0df                      	rcall	DisplayRacket
                                 
000073 9110 0100                 	lds		param1, rP1RacketPos
000075 e024                      	ldi		param2, RACKET_FROM_END
000076 d0db                      	rcall	DisplayRacket
                                 
000077 e11f                      	ldi		param1, (((DISPLAY_Y_SIZE-BALL_SIZE)/2) )
000078 9310 0102                 	sts		rBallYPos,param1
00007a e32f                      	ldi		param2,(((DISPLAY_X_SIZE-BALL_SIZE)/2) )
00007b 9320 0102                 	sts		rBallYPos,param2
00007d d126                      	rcall	DisplayBall
                                 
                                 	;; prepare random ball direction
00007e 7f7b                      	cbr	 flagsBall, (1<<F_BALL_LEFT)
00007f fe74                      	sbrs timer_0, 4;
000080 6074                      	sbr	 flagsBall, (1<<F_BALL_LEFT)
                                 
000081 7f77                      	cbr	 flagsBall, (1<<F_BALL_UP)
000082 fe75                      	sbrs timer_0, 5;
000083 6078                      	sbr	 flagsBall, (1<<F_BALL_UP)
                                 
                                 INFLOOPGAME: ;; current game loop
000084 d15f                      	rcall	CtrlRackets
000085 d18e                      	rcall	CtrlBall
                                 
                                 
000086 e104                      	ldi param, BALL_STARTING_SPEED_X
000087 fc97                      	sbrc ballspeedX, 7 ; if it will go to the 255
000088 2e90                      	mov ballspeedX,param  ; set to beginning
                                 
000089 e207                      	ldi param, BALL_STARTING_SPEED_Y
00008a fca7                      	sbrc ballspeedY, 7 ; if it will go to the 255
00008b 2ea0                      	mov ballspeedY,param  ; set to beginning
                                 
                                 
00008c ff96                      	sbrs	flags, F_GAME
00008d c001                      	rjmp	INFLOOP 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
00008e cff5                      	rjmp INFLOOPGAME
                                 
                                 
                                 INFLOOP: ;;wait for game to start
00008f ff95                      	sbrs	flags, F_START
000090 cffe                      	rjmp	INFLOOP
000091 d0fc                      	rcall ClearBall
000092 cfce                      	rjmp MainProg
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 .include "hardware.asm"
                                 
                                 
                                 InitHardware:
                                     ; ----------------------------------------------- PINS
                                 
                                 
000093 982a                          cbi     PORTB,PB2
000094 9a22                          sbi     DDRB,PB2              ; #SS output. Must set as output form SPI Master mode
                                 
000095 9a2b                          sbi     PORTB,PB3
000096 9a23                          sbi     DDRB,PB3              ; SPI MOSI
                                 
                                     ;sbi     PORTB,PB4
                                     ;sbi     DDRB,PB4              ; SPI MISO - doesn't work
                                 
000097 9a2d                          sbi     PORTB,PB5
000098 9a25                          sbi     DDRB,PB5              ; SPI SCK
                                 
000099 9a28                          sbi     PORT_LCD_DC,IN_LCD_DC
00009a 9a20                          sbi     DDR_LCD_DC,IN_LCD_DC              ; 
                                 
00009b 9829                          cbi     PORT_LCD_RST,IN_LCD_RST
00009c 9a21                          sbi     DDR_LCD_RST,IN_LCD_RST           ; 
                                 
                                 
                                 
                                     ; inputs
00009d 983b                          cbi     DDR_P2_DOWN,IN_P2_DOWN          ; as input with pull-up
00009e 9a43                          sbi     PORT_P2_DOWN,IN_P2_DOWN
                                 
00009f 983a                          cbi     DDR_P2_UP,IN_P2_UP              ; as input with pull-up
0000a0 9a42                          sbi     PORT_P2_UP,IN_P2_UP
                                 
0000a1 9850                          cbi     DDR_P1_DOWN,IN_P1_DOWN          ; as input with pull-up
0000a2 9a58                          sbi     PORT_P1_DOWN,IN_P1_DOWN
                                 
0000a3 9851                          cbi     DDR_P1_UP,IN_P1_UP              ; as input with pull-up
0000a4 9a59                          sbi     PORT_P1_UP,IN_P1_UP
                                 
0000a5 9838                          cbi     DDR_START,IN_START              ; as input with pull-up
0000a6 9a40                          sbi     PORT_START,IN_START
                                 
0000a7 9100 0035                     lds     param,MCUCR
0000a9 6100                          sbr     param,(1<<PUD)                  ; enable intrnal pull-ups
0000aa 9300 0035                     sts     MCUCR,param
                                 
                                     ; ------------------------------------- TIMER0
                                     ; system clock
                                 .equ TIMER_F = 1000 ;[Hz]
                                 .equ N = 64 ; divider
                                 .equ TIMER0_OCR = (CPU_CLOCK/(TIMER_F*N)) - 1 ; 1kHz
                                 
                                 
0000ac e70c                          ldi     param,TIMER0_OCR
0000ad bd07                          out     OCR0A,param
                                 ;   TCCR0A                              CTC , divider 64
                                 ;   +------+------+------+------+---+---+-----+-----+
                                 ;   |COM0A1|COM0A0|COM0B1|COM0B0| - | - |WGM01|WGM00|
                                 ;   +------+------+------+------+---+---+-----+-----+
                                 ;   |   0  |  0   |   0  |   0  | 0 | 0 |  1  |  0  | = 0x02
                                 ;   +------+------+------+------+---+---+-----+-----+
                                 
0000ae e002                          ldi     param,(1<<WGM01)
0000af bd04                          out     TCCR0A,param
                                 
                                 ;   TCCR0B
                                 ;   +------+------+------+------+-------+------+------+------+
                                 ;   |FOC0A |FOC0B |   -  |   -  | WGM02 | CS02 | CS01 | CS00 |
                                 ;   +------+------+------+------+-------+------+------+------+
                                 ;   |   0  |  0   |   0  |   0  |   0   |  0   |  1   |  1   | = 0x03
                                 ;   +------+------+------+------+-------+------+------+------+
0000b0 e003                          ldi     param,(1<<CS01)|(1<<CS00)
0000b1 bd05                          out     TCCR0B,param
                                 
0000b2 9100 006e                     lds     param,TIMSK0
0000b4 6002                          sbr     param,(1<<OCIE0A)     ; enable interrupt
0000b5 9300 006e                     sts     TIMSK0,param
                                 
                                 
0000b7 9508                          ret
                                 
                                 ;------------------------------------------------------------------------------
                                 ;------------------------------------------------------------------------------
                                 ;------------------------------------------------------------------------------
                                 .include "LCDcontrol.asm"
                                 
                                 Delay_5ms:
0000b8 930f                          push    param
0000b9 931f                          push    param1
                                 
0000ba e615                          ldi     param1,  (( CPU_CLOCK / 80400 ) +2 )
                                 Delay_5ms_loop1:
0000bb e800                          ldi     param, 0x80
                                 Delay_5ms_loop2:
0000bc 950a                          dec     param
0000bd f7f1                          brne    Delay_5ms_loop2
                                 
0000be 951a                          dec     param1
0000bf f7d9                          brne    Delay_5ms_loop1
                                 
0000c0 911f                          pop     param1
0000c1 910f                          pop     param
                                 	
                                 
0000c2 9508                      	ret 
                                 ;; GENERAL LCD INIT
                                 
                                 
                                 InitLcd:
                                 
                                 
                                 ; CPHA = 0 - sample at 1st clock
                                 ; CPOL = 0 - mode 0
                                 ; DORD = 0 - MSB 1st
                                 ; MSTR = 1 - master
                                 ; SPR1:SPR2 = 11 - fosc/128
                                 ; initalize SPI port
                                 
0000c3 9829                          cbi     PORT_LCD_RST,IN_LCD_RST     ; Reset display controller
0000c4 dff3                          rcall   Delay_5ms
0000c5 9a29                          sbi     PORT_LCD_RST,IN_LCD_RST
0000c6 dff1                          rcall   Delay_5ms
                                 
                                 
0000c7 b50d                          in      param,SPSR
0000c8 b50e                          in      param,SPDR  ; clear SPIF bit
                                 
0000c9 e500                          ldi     param,(1<<SPE)|(1<<MSTR)//|(1<<SPR1)|(1<<SPR0)
0000ca bd0c                          out     SPCR,param
                                 
                                 
                                 .IFDEF _SIMULATING_
                                 .ENDIF
                                 
                                 ; 100ms delay loop
0000cb e104                          ldi     param,20
                                 InitLcdInitDelayLoop:
0000cc dfeb                          rcall   Delay_5ms
0000cd 950a                          dec     param
0000ce f7e9                          brne    InitLcdInitDelayLoop
                                 
                                     ; selected_spi.send(0xA8,0); selected_spi.send(0x3F,0); //set MUX ratio (pierwsze to komenda drugie to dane)
0000cf ea08                          ldi     param,0xA8
0000d0 d059                          rcall   LcdCommand
0000d1 e30f                          ldi     param,0x3F
0000d2 d057                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xD3,0); selected_spi.send(0x00,0); //Set display Offset 0
0000d3 ed03                          ldi     param,0xD3
0000d4 d055                          rcall   LcdCommand
0000d5 e000                          ldi     param,0x00
0000d6 d053                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0x40,0); //set start line to 0
0000d7 e400                          ldi     param,0x40
0000d8 d051                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xA0,0); // segment remap, zero=zero
0000d9 ea00                          ldi     param,0xA0
0000da d04f                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xC0,0); //Set com output scan direction COM0->COM16
0000db ec00                          ldi     param,0xC0
0000dc d04d                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xDA,0); selected_spi.send(0x12,0); // COM pin hardwarde configuration
0000dd ed0a                          ldi     param,0xDA
0000de d04b                          rcall   LcdCommand
0000df e102                          ldi     param,0x12
0000e0 d049                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0x81,0); selected_spi.send(0x8F,0); // Set contrast
0000e1 e801                          ldi     param,0x81
0000e2 d047                          rcall   LcdCommand
0000e3 e80f                          ldi     param,0x8F
0000e4 d045                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xA4,0); //display on, clear ram
0000e5 ea04                          ldi     param,0xA4
0000e6 d043                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xA6,0); //1 in RAM means pixel turned ON
0000e7 ea06                          ldi     param,0xA6
0000e8 d041                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xD5,0); selected_spi.send(0x80,0); // set clock (i have no idea what i'm doing)
0000e9 ed05                          ldi     param,0xD5
0000ea d03f                          rcall   LcdCommand
0000eb e800                          ldi     param,0x80
0000ec d03d                          rcall   LcdCommand
                                 
                                 
                                     ;selected_spi.send(0x8D,0); selected_spi.send(0x14,0); // enable bump charge
0000ed e80d                          ldi     param,0x8D
0000ee d03b                          rcall   LcdCommand
0000ef e104                          ldi     param,0x14
0000f0 d039                          rcall   LcdCommand
                                 
                                     ;selected_spi.send(0xAF,0); //display on
0000f1 ea0f                          ldi     param,0xAF
0000f2 d037                          rcall   LcdCommand
                                 
                                     //prepare to show data---------------------------------
                                     ;selected_spi.send(0x20,0); selected_spi.send(0x01,0); // Vertical adressing mode
0000f3 e200                          ldi     param,0x20
0000f4 d035                          rcall   LcdCommand
0000f5 e001                          ldi     param,0x01
0000f6 d033                          rcall   LcdCommand
                                 
                                 
                                     ;selected_spi.send(0x21,0);selected_spi.send(0x00,0);selected_spi.send(127,0); // Set column strart/end adress
0000f7 e201                          ldi     param,0x21
0000f8 d031                          rcall   LcdCommand
0000f9 e000                          ldi     param,0x00
0000fa d02f                          rcall   LcdCommand
0000fb e70f                          ldi     param,127
0000fc d02d                          rcall   LcdCommand
                                 
                                 
                                     ;selected_spi.send(0x22,0);selected_spi.send(0xB0,0);selected_spi.send(0xB7,0); // set page start/end adress B nie ma znaczenia bo przyjmuje tlyko trzy ostatnie bity
0000fd e202                          ldi     param,0x22
0000fe d02b                          rcall   LcdCommand
0000ff eb00                          ldi     param,0xB0
000100 d029                          rcall   LcdCommand
000101 eb07                          ldi     param,0xB7
000102 d027                          rcall   LcdCommand
                                 
000103 d005                          rcall   LcdSsd1306Clear
                                 
                                     ; set contrast
000104 e801                          ldi     param,0x81
000105 d024                          rcall   LcdCommand
000106 ef0f                          ldi     param,0xFF
000107 d022                          rcall   LcdCommand
                                 
                                 
000108 9508                      	ret
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; Clscr
                                 ; Parameters:
                                 ;   none
                                 ;---------------------------------------------------------------------------
                                 LcdSsd1306Clear:
000109 930f                          push    param
00010a 931f                          push    param1
00010b 932f                          push    param2
                                 
                                     ; Set column start/end address
00010c e201                          ldi     param,0x21
00010d d01c                          rcall   LcdCommand
00010e e000                          ldi     param,0x00
00010f d01a                          rcall   LcdCommand
000110 e70f                          ldi     param,127
000111 d018                          rcall   LcdCommand
                                 
                                     ; set page start/end adress
000112 e202                          ldi     param,0x22
000113 d016                          rcall   LcdCommand
000114 eb00                          ldi     param,0xB0
000115 d014                          rcall   LcdCommand
000116 eb07                          ldi     param,0xB7
000117 d012                          rcall   LcdCommand
                                 
                                     ; clear LCD
000118 e010                          ldi     param1,0
000119 e024                          ldi     param2,4
                                 LcdSsd1306ClearLoop:
                                 
00011a e000                          ldi     param, 0
00011b d008                          rcall   LcdSendByte
                                 
00011c 951a                          dec     param1
00011d f7e1                          brne    LcdSsd1306ClearLoop
                                 
00011e 952a                          dec     param2
00011f f7d1                          brne    LcdSsd1306ClearLoop
                                 
000120 912f                          pop     param2
000121 911f                          pop     param1
000122 910f                          pop     param
                                 
000123 9508                          ret
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; Write Byte into LCD data (non command)
                                 ; Parameters:
                                 ;   param - Byte to send
                                 ;---------------------------------------------------------------------------
                                 
                                 LcdSendByte:
                                 
000124 bd0e                          out     SPDR,param
                                 	
                                 	LcdSendByteLoop:
000125 b50d                          in      param,SPSR
000126 ff07                          sbrs    param,SPIF
000127 cffd                          rjmp    LcdSendByteLoop ;; wait for end of sending
                                 
000128 b50d                          in      param,SPSR  ; for clearing SPIF bit only
                                 
000129 9508                          ret
                                 
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; Write Command 
                                 ; Parameters:
                                 ;   param - command
                                 ;---------------------------------------------------------------------------
                                 LcdCommand:
                                 
                                 
00012a 9828                          cbi     PORT_LCD_DC,IN_LCD_DC     ; Set to Command
                                 
00012b dff8                          rcall   LcdSendByte
                                 
00012c 9a28                          sbi     PORT_LCD_DC,IN_LCD_DC     ; Set to Data
                                 
00012d 9508                          ret
                                 
                                 
                                 
                                 .include "irq.asm"
                                 
                                 
                                 //*****************************************************************************
                                 // System Timer
                                 // 1ms
                                 //*****************************************************************************
                                 ; Timer0
                                 SystemTimerOvf:
                                 
00012e b6bf                          in      sreg_save, SREG
                                 
00012f 930f                          push    param
                                 
                                     ; update system timer
000130 0c73                          add     timer_0,one      ; LSB
000131 1c62                          adc     timer_1,zero
000132 1c52                          adc     timer_2,zero     ; MSB
                                 
                                 
000133 2d07                          mov     param,timer_0
000134 7007                          andi    param,0x07
000135 3007                          cpi     param,0x07
000136 f459                          brne    SystemTimerOvfSkip
                                     ; check keys every 8 ms
000137 7c91                          cbr     flags,(1<<F_P1_UP)|(1<<F_P1_DOWN)|(1<<F_P2_UP)|(1<<F_P2_DOWN)|(1<<F_START) ; clear all pins
                                 
000138 9b33                          sbis    PIN_P2_DOWN,IN_P2_DOWN
000139 6190                          sbr     flags,(1<<F_P2_DOWN)
                                 
00013a 9b32                          sbis    PIN_P2_UP,IN_P2_UP
00013b 6098                          sbr     flags,(1<<F_P2_UP)
                                 
00013c 9b48                          sbis    PIN_P1_DOWN,IN_P1_DOWN
00013d 6094                          sbr     flags,(1<<F_P1_DOWN)
                                 
00013e 9b49                          sbis    PIN_P1_UP,IN_P1_UP
00013f 6092                          sbr     flags,(1<<F_P1_UP)
                                 
000140 9b30                          sbis    PIN_START,IN_START
000141 6290                          sbr     flags,(1<<F_START)
                                 
                                 SystemTimerOvfSkip:
000142 1478                      	cp		timer_0,rackettimer
000143 f419                      	brne	SkipTimerSetTick
000144 e008                      	ldi		param, RACKET_SPEED
000145 0e80                      	add		rackettimer,param
000146 6091                          sbr     flags,(1<<F_TICK) ; set tick flag
                                 SkipTimerSetTick:
                                 
000147 147c                      	cp timer_0, balltimerX
000148 f411                      	brne SkipTimerBallXSetTick
000149 0cc9                      	add balltimerX, ballspeedX
00014a 6071                      	sbr flagsBall, (1<<F_TICK_X)
                                 SkipTimerBallXSetTick:
                                 
00014b 147d                      	cp timer_0, balltimerY
00014c f411                      	brne SkipTimerBallYSetTick
00014d 0cda                      	add balltimerY, ballspeedY
00014e 6072                      	sbr flagsBall, (1<<F_TICK_Y)
                                 SkipTimerBallYSetTick:
                                 
                                 
00014f 910f                          pop     param
                                 
000150 bebf                          out     SREG, sreg_save
                                 
000151 9518                          reti
                                 .include "Tennis.asm"
                                 
                                 ; Display Racket	
                                 ; Parameters:
                                 ;	param, coutner,tmp	- destroyed
                                 ;   param1	- Y (bits) position (0 means touching high)
                                 ;   param2	- X (bits) position (generally 2 or 124)
                                 ;	param1	- has to be from 0 to 48; destroyed in process
                                 ;	param2	- has to be from 0 to 126; 
                                 ;---------------------------------------------------------------------------
                                 DisplayRacket:
                                 	
                                 	; Set column start/end address
                                 	; column adress is x position in bits
000152 e201                          ldi     param,0x21 ; command
000153 dfd6                          rcall   LcdCommand
000154 2f02                          mov     param, param2 ; argument 1,  column begin
000155 dfd4                          rcall   LcdCommand
000156 2f02                      	mov     param, param2
000157 9503                      	inc		param; the racket has 2 columns and so next column is end of column
000158 dfd1                          rcall   LcdCommand
                                 
                                     ; set page start/end adress
                                 	; pages are vertical adresses
000159 e202                          ldi     param,0x22 ; command
00015a dfcf                          rcall   LcdCommand
00015b eb00                          ldi     param,0xB0 ; only last 3 bist matter
00015c dfcd                          rcall   LcdCommand
00015d eb07                          ldi     param,0xB7
00015e dfcb                          rcall   LcdCommand
                                 
00015f e022                      	ldi		 param2,2
                                 WriteLoopDR:
000160 1522                      	cp		param2,zero
000161 f159                      	breq	DisplayRacketEnd
                                 
                                 	; target to write is set
000162 e088                      	ldi		tmp,8
000163 2ef8                      	mov		counter, tmp 
000164 2f81                      	mov		tmp, param1
000165 9586                      	lsr		tmp
000166 9586                      	lsr		tmp
000167 9586                      	lsr		tmp ; now we have number of bytes to write 0s
000168 1af8                      	sub		counter, tmp ; remember how many bytes skipped
000169 2d02                      	mov		param,zero
00016a 1582                      	cp		tmp,zero 
00016b f029                      	breq	AfterLoopDR
                                 	
                                 ZerosLoop:
00016c 2700                      	clr param
00016d dfb6                      	rcall	LcdSendByte;
00016e 958a                      	dec		tmp;
00016f 1182                      	cpse	tmp, zero
000170 cffb                      	rjmp	ZerosLoop
                                 AfterLoopDR:
                                 
000171 2d04                      	mov		param, ff 
000172 2f81                      	mov		tmp, param1
000173 7087                      	andi	tmp, 0x07; 00000111 geting last 3 bits, 
                                 
                                 ShiftLoop:
000174 1582                      	cp		tmp,zero
000175 f019                      	breq	ShiftLoopEnd
000176 0f00                      	lsl		param
000177 958a                      	dec		tmp
000178 cffb                      	rjmp	ShiftLoop
                                 ShiftLoopEnd:
                                 
000179 2f80                      	mov tmp, param ; save param
00017a dfa9                      	rcall	LcdSendByte ; send the end 
00017b 94fa                      	dec		counter
00017c 2d04                      	mov		param,ff
00017d dfa6                      	rcall	LcdSendByte
00017e 94fa                      	dec		counter
00017f 2f08                      	mov		param,tmp
000180 2504                      	eor		param, ff ;; negate tm
000181 14f2                      	cp		counter, zero ; if param2 was exactly 48 we cannot send next byte (to many)
000182 f041                      	breq	SkipFillingZeros
000183 dfa0                      	rcall	lcdSendByte
000184 94fa                      	dec		counter
                                 
                                 
                                 	
                                 FillWithZeroesLoop:
000185 14f2                      	cp		counter,zero
000186 f021                      	breq	SkipFillingZeros
000187 2700                      	clr param
000188 df9b                      	rcall LcdSendByte
000189 94fa                      	dec		counter
00018a cffa                      	rjmp FillWithZeroesLoop
                                 SkipFillingZeros:
                                 
                                 
00018b 952a                      	dec param2
00018c cfd3                      	rjmp WriteLoopDR
                                 
                                 DisplayRacketEnd:
00018d 9508                      	ret
                                 ;---------------------------------------------------------------------------
                                 ; clear ball
                                 ; Parameters:
                                 ;	param  - destroyed
                                 ;	tmp	   - destroyed
                                 ;---------------------------------------------------------------------------
                                 ClearBall:
                                 
00018e e201                      	ldi     param,0x21 ; command
00018f df9a                          rcall   LcdCommand
000190 9100 0103                     lds param, rBallXPos 
000192 df97                          rcall   LcdCommand
000193 9100 0103                 	lds param, rBallXPos 
000195 9503                      	inc		param; the ball has 2 columns and so next column is end of column
000196 df93                          rcall   LcdCommand
                                 
                                 	 ; set page start/end adress
                                 	; pages are vertical adresses
000197 e202                          ldi     param,0x22 ; command
000198 df91                          rcall   LcdCommand
000199 eb00                          ldi     param,0xB0 ; only last 3 bist matter
00019a df8f                          rcall   LcdCommand
00019b eb07                          ldi     param,0xB7
00019c df8d                          rcall   LcdCommand
                                 
00019d e180                      	ldi tmp, 16
                                 ClearBallLoop:
00019e 958a                      	dec tmp
00019f 2700                      	clr param
0001a0 df83                      	rcall LcdSendByte
0001a1 1182                      	cpse tmp,zero
0001a2 cffb                      	rjmp ClearBallLoop
                                 
                                 
0001a3 9508                      	ret
                                 
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; Display Ball	(also rembers the new ball position)
                                 ; Parameters:
                                 ;	param  - destroyed
                                 ;	tmp	   - destroyed
                                 ;   param1 - Y (bits) position (0 means touching high)
                                 ;   param2 - X (bits) position (generally 2 or 124)
                                 ;	param1 - has to be from 0 to 48; destroyed in process
                                 ;	param2 - has to be from 0 to 126; 
                                 ;---------------------------------------------------------------------------
                                 DisplayBall:
                                 
0001a4 9310 0102                 	sts rBallYPos,param1
0001a6 9320 0103                 	sts rBallXPos,param2
                                 
                                 	; Set column start/end address
                                 	; column adress is x position in bits
0001a8 e201                          ldi     param,0x21 ; command
0001a9 df80                          rcall   LcdCommand
0001aa 2f02                          mov     param, param2 ; argument 1,  column begin
0001ab df7e                          rcall   LcdCommand
0001ac 2f02                      	mov     param, param2
0001ad 9503                      	inc		param; the racket has 2 columns and so next column is end of column
0001ae df7b                          rcall   LcdCommand
                                 
                                     ; set page start/end adress
                                 	; pages are vertical adresses
0001af e202                          ldi     param,0x22 ; command
0001b0 df79                          rcall   LcdCommand
0001b1 eb00                          ldi     param,0xB0 ; only last 3 bist matter
0001b2 df77                          rcall   LcdCommand
0001b3 eb07                          ldi     param,0xB7
0001b4 df75                          rcall   LcdCommand
                                 
0001b5 e022                      	ldi		 param2,2
                                 WriteLoopDB:
0001b6 1522                      	cp		param2,zero
0001b7 f159                      	breq	DisplayBallEnd
                                 
                                 
                                 	; target to write is set
0001b8 e088                      	ldi		tmp,8
0001b9 2ef8                      	mov		counter, tmp 
0001ba 2f81                      	mov		tmp, param1
0001bb 9586                      	lsr		tmp
0001bc 9586                      	lsr		tmp
0001bd 9586                      	lsr		tmp ; now we have number of bytes to write 0s
0001be 1af8                      	sub		counter, tmp ; remember how many bytes skipped
0001bf 2d02                      	mov		param,zero
0001c0 1582                      	cp		tmp,zero 
0001c1 f029                      	breq	AfterLoopDB
                                 	
                                 ZerosLoopDB:
0001c2 2700                      	clr param
0001c3 df60                      	rcall	LcdSendByte;
0001c4 958a                      	dec		tmp;
0001c5 1182                      	cpse	tmp, zero
0001c6 cffb                      	rjmp	ZerosLoopDB
                                 AfterLoopDB:
                                 	
0001c7 2d04                      	mov		param, ff 
0001c8 2f81                      	mov		tmp, param1
0001c9 7087                      	andi	tmp, 0x07; 00000111 geting last 3 bits, 
                                 
0001ca 3087                      	cpi tmp, 7; the only way we have to use 2 bytes
0001cb f049                      	breq BallOnBytes
0001cc e003                      	ldi param, 0x03 ; 00000011
                                 
                                 ShiftLoop1DB:
0001cd 1582                      	cp tmp,zero
0001ce f019                      	breq AfterShiftLoop1DB
0001cf 958a                      	dec tmp
0001d0 0f00                      	lsl param
0001d1 cffb                      	rjmp ShiftLoop1DB
                                 
                                 AfterShiftLoop1DB:
0001d2 df51                      	rcall LcdSendByte
0001d3 94fa                      	dec counter
0001d4 c006                      	rjmp FillWithZeroesLoopDB
                                 BallOnBytes:
0001d5 e800                      	ldi param,0x80 ; 1000 0000
0001d6 df4d                      	rcall LcdSendByte
0001d7 94fa                      	dec counter
0001d8 e001                      	ldi param,0x01 ; 0000 0001
0001d9 df4a                      	rcall LcdSendByte
0001da 94fa                      	dec counter
                                 	
                                 FillWithZeroesLoopDB:
0001db 14f2                      	cp		counter,zero
0001dc f021                      	breq	SkipFillingZerosDB
0001dd 2700                      	clr param
0001de df45                      	rcall LcdSendByte
0001df 94fa                      	dec		counter
0001e0 cffa                      	rjmp FillWithZeroesLoopDB
                                 SkipFillingZerosDB:
                                 
                                 
                                 
0001e1 952a                      	dec param2
0001e2 cfd3                      	rjmp WriteLoopDB
                                 
                                 DisplayBallEnd:
0001e3 9508                      	ret
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; CtrlRackets - control and move rackets
                                 ; Parameters:
                                 ;	param  - destroyed
                                 ;	tmp	   - destroyed
                                 ;   param1 - destroyed
                                 ;   param2 - destroyed
                                 ;---------------------------------------------------------------------------
                                 CtrlRackets:
0001e4 ff90                      	sbrs     flags,F_TICK
0001e5 c02d                      	rjmp CtrlRacketsEnd
0001e6 7f9e                      	cbr     flags,(1<<F_TICK)
                                 	;; tick is here
                                 
0001e7 ff91                      	sbrs	 flags, F_P1_UP
0001e8 c009                      	rjmp	SkipP1Up
0001e9 9110 0100                 	lds param1, rP1RacketPos
0001eb 1512                      	cp param1,zero
0001ec f029                      	breq SkipP1Up
0001ed 951a                      	dec param1
0001ee 9310 0100                 	sts rP1RacketPos,param1
0001f0 e024                      	ldi param2, RACKET_FROM_END
0001f1 df60                      	rcall DisplayRacket
                                 SkipP1Up:
                                 
0001f2 ff92                      	sbrs	 flags, F_P1_DOWN
0001f3 c009                      	rjmp	SkipP1DOWN
0001f4 9110 0100                 	lds param1, rP1RacketPos
0001f6 3310                      	cpi param1, DISPLAY_Y_SIZE-RACKET_SIZE
0001f7 f029                      	breq SkipP1DOWN
0001f8 9513                      	inc param1
0001f9 9310 0100                 	sts rP1RacketPos,param1
                                 	;ldi param2, 
0001fb e024                      	ldi param2, RACKET_FROM_END
0001fc df55                      	rcall DisplayRacket
                                 SkipP1DOWN:
                                 
                                 
0001fd ff93                      	sbrs	 flags, F_P2_UP
0001fe c009                      	rjmp	SkipP2Up
0001ff 9110 0101                 	lds param1, rP2RacketPos
000201 1512                      	cp param1,zero
000202 f029                      	breq SkipP2Up
000203 951a                      	dec param1
000204 9310 0101                 	sts rP2RacketPos,param1
000206 e72a                      	ldi param2, DISPLAY_X_SIZE-RACKET_FROM_END - RACKET_X_SIZE
000207 df4a                      	rcall DisplayRacket
                                 SkipP2Up:
                                 
                                 
000208 ff94                      	sbrs	 flags, F_P2_DOWN
000209 c009                      	rjmp	SkipP2DOWN
00020a 9110 0101                 	lds param1, rP2RacketPos
00020c 3310                      	cpi param1, DISPLAY_Y_SIZE-RACKET_SIZE
00020d f029                      	breq SkipP2DOWN
00020e 9513                      	inc param1
00020f 9310 0101                 	sts rP2RacketPos,param1
000211 e72a                      	ldi param2, DISPLAY_X_SIZE-RACKET_FROM_END - RACKET_X_SIZE
000212 df3f                      	rcall DisplayRacket
                                 SkipP2DOWN:
                                 CtrlRacketsEnd:
000213 9508                      	ret
                                 
                                 
                                 ;---------------------------------------------------------------------------
                                 ; CtrlBall - control and move Ball 
                                 ; Parameters:
                                 ;	param  - destroyed
                                 ;	tmp	   - destroyed
                                 ;	counter -destroyed
                                 ;   param1 - destroyed
                                 ;   param2 - destroyed
                                 ;---------------------------------------------------------------------------
                                 CtrlBall:
                                 
                                 
                                 ; moving ball up and down:
000214 ff71                      	sbrs	flagsBall,F_TICK_Y
000215 c01d                      	rjmp	CtrlBallX
000216 7f7d                      	cbr		flagsBall,(1<<F_TICK_Y)
000217 9110 0102                 	lds		param1,rBallYPos
000219 9120 0103                 	lds		param2,rBallXPos
                                 
                                 
00021b ff73                      	sbrs    flagsBall,F_BALL_UP
00021c c00b                      	rjmp	BallDown
                                 	; ball Y speed is up
00021d 1112                      	cpse	param1, zero
00021e c005                      	rjmp	BallUpSpeedNoChange
                                 
                                 	;; we just hit the top
00021f 9513                      	inc		param1 
000220 df6d                      	rcall	ClearBall ; does not change param1 or param2
000221 df82                      	rcall	DisplayBall
000222 7f77                      	cbr		flagsBall, (1<<F_BALL_UP) ; set that speed is down
000223 c00f                      	rjmp	CtrlBallX
                                 
                                 BallUpSpeedNoChange:
000224 951a                      	dec		param1 ; move one up
000225 df68                      	rcall	ClearBall ; does not change param1 or param2
000226 df7d                      	rcall	DisplayBall
                                 
000227 c00b                      	rjmp	CtrlBallX
                                 BallDown:
000228 e30e                      	ldi		param, DISPLAY_Y_SIZE - BALL_SIZE
000229 1310                      	cpse	param1,param
00022a c005                      	rjmp	BallDownSpeedNoChange
                                 	; hit bottom
00022b 6078                      	sbr		flagsBall, (1<<F_BALL_UP) ; set that speed is up
00022c 951a                      	dec		param1 ; move one up
00022d df60                      	rcall	ClearBall ; does not change param1 or param2
00022e df75                      	rcall	DisplayBall
                                 
00022f c003                      	rjmp	CtrlBallX
                                 BallDownSpeedNoChange:
000230 9513                      	inc		param1 ; move down
000231 df5c                      	rcall	ClearBall ; does not change param1 or param2
000232 df71                      	rcall	DisplayBall
                                 
                                 CtrlBallX:
000233 ff70                      	sbrs     flagsBall,F_TICK_X
000234 c067                      	rjmp	CtrlBallEnd
                                 
000235 7f7e                      	cbr		flagsBall,(1<<F_TICK_X)
                                 
000236 9110 0102                 	lds		param1,rBallYPos
000238 9120 0103                 	lds		param2,rBallXPos
                                 
                                 
00023a ff72                      	sbrs    flagsBall,F_BALL_LEFT
00023b c031                      	rjmp	BallRight
                                 	;ball goes left
00023c e006                      	ldi		param, (RACKET_FROM_END + RACKET_X_SIZE)
00023d 1720                      	cp	param2,param
00023e f021                      	breq	BallLeftCanHit
                                 
00023f 952a                      	dec		param2
000240 df4d                      	rcall	ClearBall
000241 df62                      	rcall	DisplayBall
                                 
000242 c059                      	rjmp	CtrlBallEnd
                                 
                                 BallLeftCanHit:
                                 
000243 9180 0100                 	lds		tmp, rP1RacketPos
000245 1582                      	cp		tmp,zero ; racket being on zero is problematic
000246 f059                      	breq	LeftRacketTop
000247 958a                      	dec		tmp
000248 1b18                      	sub		param1,tmp ; if param1 < tmp, ball is above the racket
000249 f10a                      	brmi	BallMiss ; branch if result is negative, ergo param1 < tmp
                                 	;inc tmp done in +1 below
00024a e110                      	ldi		param1, (RACKET_SIZE) ; tmp points at the last (looking from top) pixel of racket
00024b 0f81                      	add		tmp, param1
00024c 9110 0102                 	lds		param1, rBallYPos ; restore param1
00024e 9583                      	inc		tmp ;; donno if works
00024f 1b18                      	sub		param1,tmp ; if param1>tmp  ball misses
000250 f4d2                      	brpl	BallMiss ; branch if positive
                                 	; bounce
                                 
000251 c003                      	rjmp	LeftBallBounce
                                 
                                 
                                 
                                 
                                 LeftRacketTop:
000252 e08f                      	ldi		tmp, RACKET_SIZE -1 ; tmp set on last pixel of racket
000253 1b18                      	sub		param1,tmp ; if param1 >tmp   ball misses <is below>
000254 f4b2                      	brpl	BallMiss ; branch if positive
                                 
                                 	;rjmp	LeftBallBounce
                                 
                                 	
                                 LeftBallBounce:
                                 
000255 9110 0102                 	lds		param1,rBallYPos
000257 9120 0103                 	lds		param2,rBallXPos
                                 
000259 9523                      	inc		param2
00025a df33                      	rcall	ClearBall
00025b df48                      	rcall	DisplayBall
                                 
00025c 7f7b                      	cbr		flagsBall,(1<<F_BALL_LEFT) ; clear if goes left flag
                                 
00025d d03f                      	rcall BallXSpeedInc
                                 	;ldi		param, BALL_X_SPEED_STEP
                                 	;sub		ballspeedX, param; increase X speed
                                 
                                 	;adding Y speed
00025e e004                      	ldi param, BALL_Y_SPEED_STEP
00025f ff91                      	sbrs	flags, F_P1_UP
000260 c005                      	rjmp	P1NotUP
000261 fd73                      	sbrc    flagsBall,F_BALL_UP ; Both Ball And Racket going up => increase speed <decrease the number>, skip otherwise <if flag is 0>
000262 1aa0                      	sub		ballspeedY,param
000263 ff73                      	sbrs	flagsBall,F_BALL_UP ; if both are going up, skip
000264 0ea0                      	add		ballspeedY,param ; decrease speed
                                 
000265 c036                      	rjmp CtrlBallEnd
                                 
                                 P1NotUP:
000266 fd73                      	sbrc    flagsBall,F_BALL_UP ; 
000267 0ea0                      	add		ballspeedY,param
000268 ff73                      	sbrs	flagsBall,F_BALL_UP ; if both are going up, skip
000269 1aa0                      	sub		ballspeedY,param ; decrease speed
                                 
00026a c031                      	rjmp CtrlBallEnd
                                 	
                                 ;;---------------- is here due to branch range
                                 BallMiss:
00026b 7b9f                      	cbr flags, (1<<F_GAME) ; set game to STOP
                                 	;rjmp CtrlBallEnd
00026c c02f                      	rjmp CtrlBallEnd
                                 ;;---------------- is here due to branch range
                                 
                                 
                                 
                                 BallRight:
                                 	
                                 	;ball goes right
00026d e708                      	ldi		param, (DISPLAY_X_SIZE - RACKET_X_SIZE - RACKET_FROM_END - BALL_SIZE)
00026e 1720                      	cp	param2,param
00026f f021                      	breq	BallRightCanHit
                                 	; ball cannot hit yet
000270 9523                      	inc		param2
000271 df1c                      	rcall	ClearBall
000272 df31                      	rcall	DisplayBall
                                 
000273 c028                      	rjmp	CtrlBallEnd
                                 
                                 BallRightCanHit:
                                 
000274 9180 0101                 	lds		tmp, rP2RacketPos
000276 1582                      	cp		tmp,zero ; racket being on zero is problematic
000277 f059                      	breq	RightRacketTop
000278 958a                      	dec		tmp
000279 1b18                      	sub		param1,tmp ; if param1 < tmp, ball is above the racket
00027a f382                      	brmi	BallMiss ; branch if result is negative, ergo param1 < tmp
                                 	;inc tmp done in +1 below
00027b e110                      	ldi		param1, (RACKET_SIZE) ; tmp points at the last (looking from top) pixel of racket
00027c 0f81                      	add		tmp, param1
00027d 9110 0102                 	lds		param1, rBallYPos ; restore param1
00027f 9583                      	inc		tmp ;; donno if works
000280 1b18                      	sub		param1,tmp ; if param1>tmp  ball misses
000281 f74a                      	brpl	BallMiss ; branch if positive
                                 	; bounce
                                 
000282 c003                      	rjmp	RightBallBounce
                                 
                                 
                                 
                                 
                                 RightRacketTop:
000283 e08f                      	ldi		tmp, RACKET_SIZE -1 ; tmp set on last pixel of racket
000284 1b18                      	sub		param1,tmp ; if param1 >tmp   ball misses <is below>
000285 f72a                      	brpl	BallMiss ; branch if positive
                                 
                                 	;rjmp	RightBallBounce ;;not necessary
                                 
                                 	
                                 RightBallBounce:
                                 
000286 9110 0102                 	lds		param1,rBallYPos
000288 9120 0103                 	lds		param2,rBallXPos
                                 
00028a 952a                      	dec		param2
00028b df02                      	rcall	ClearBall
00028c df17                      	rcall	DisplayBall
                                 
00028d 6074                      	sbr		flagsBall,(1<<F_BALL_LEFT) ; set if goes left flag
                                 
00028e d00e                      	rcall BallXSpeedInc
                                 	;ldi		param, BALL_X_SPEED_STEP
                                 	;sub		ballspeedX, param; increase X speed
                                 
                                 	;adding Y speed
00028f e004                      	ldi param, BALL_Y_SPEED_STEP
000290 ff93                      	sbrs	flags, F_P2_UP
000291 c005                      	rjmp	P2NotUP
000292 fd73                      	sbrc    flagsBall,F_BALL_UP ; Both Ball And Racket going up => increase speed <decrease the number>, skip otherwise <if flag is 0>
000293 1aa0                      	sub		ballspeedY,param
000294 ff73                      	sbrs	flagsBall,F_BALL_UP ; if both are going up, skip
000295 0ea0                      	add		ballspeedY,param ; decrease speed
000296 c005                      	rjmp CtrlBallEnd
                                 P2NotUP:
000297 fd73                      	sbrc    flagsBall,F_BALL_UP ; 
000298 0ea0                      	add		ballspeedY,param
000299 ff73                      	sbrs	flagsBall,F_BALL_UP ; if both are going up, skip
00029a 1aa0                      	sub		ballspeedY,param ; decrease speed
                                 
                                 
                                 
                                 
                                 
                                 
                                 
00029b c000                      	rjmp CtrlBallEnd
                                 
                                 
                                 CtrlBallEnd:
00029c 9508                      	ret
                                 
                                 
                                 
                                 ;------------------------------------------------------------------------------
                                 ; BallXSpeedInc = increase the speed of the ball up to 8
                                 ; param,tmp - destroyed
                                 ;------------------------------------------------------------------------------
                                 BallXSpeedInc:
00029d 2d09                      	mov param, ballspeedX
00029e 9506                      	lsr param
00029f 9506                      	lsr param
0002a0 9506                      	lsr param ;divide by 8
0002a1 1502                      	cp param,zero
0002a2 f011                      	breq BallXSpeedIncBelow8
0002a3 1a90                      	sub ballspeedX, param ; 
0002a4 c001                      	rjmp BallXSpeedIncEnd
                                 
                                 BallXSpeedIncBelow8:
                                 	
0002a5 949a                      	dec ballspeedX ; dec by exactly one
                                 
                                 BallXSpeedIncEnd:
0002a6 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   1 z  :   0 r0 :   0 r1 :   0 r2 :  25 r3 :   2 r4 :   5 
r5 :   1 r6 :   1 r7 :   7 r8 :   3 r9 :   7 r10:  12 r11:   2 r12:   3 
r13:   3 r14:   0 r15:  15 r16: 157 r17:  61 r18:  37 r19:   0 r20:   0 
r21:   0 r22:   0 r23:  25 r24:  52 r25:  20 r26:   0 r27:   0 r28:   2 
r29:   2 r30:   0 r31:   0 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :  10 adiw  :   0 and   :   0 
andi  :   3 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  19 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   2 
brne  :  10 brpl  :   4 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   2 cbi   :   9 cbr   :   9 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  20 cpc   :   1 
cpi   :   4 cpse  :   5 dec   :  29 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :  11 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 101 lds   :  24 lpm   :   0 lsl   :   2 
lsr   :   9 mov   :  27 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   8 pop   :   6 
push  :   6 rcall : 100 ret   :  12 reti  :   2 rjmp  :  68 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  15 sbic  :   0 sbis  :   5 
sbiw  :   0 sbr   :  15 sbrc  :   6 sbrs  :  20 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   1 std   :   0 sts   :  16 
sub   :  13 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00054e   1308      0   1308   32768   4.0%
[.dseg] 0x000100 0x000104      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
